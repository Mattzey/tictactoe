import tkinter as tk
import random

WINNING_COMBINATIONS = [
    (0, 1, 2), (3, 4, 5), (6, 7, 8),
    (0, 3, 6), (1, 4, 7), (2, 5, 8),
    (0, 4, 8), (2, 4, 6)
]


class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe")
        self.board = ['-' for _ in range(9)]
        self.current_player = 'X'
        self.difficulty = tk.StringVar(value="Średni")

        self.buttons = [
             self.create_button(i // 3, i % 3, lambda i=i: self.player_move(i))
             for i in range(9)
        ]

        # Menu wyboru trudności
        label = tk.Label(self.root, text="Poziom trudności:")
        label.grid(row=3, column=0, columnspan=1)
        difficulty_menu = tk.OptionMenu(
            self.root,
            self.difficulty,
            "Łatwy",
            "Średni",
            "Trudny"
        )
        difficulty_menu.grid(row=3, column=1, columnspan=2)

        self.reset_button = tk.Button(
            self.root, text="Resetuj", command=self.reset_game
        )
        self.reset_button.grid(row=4, column=0, columnspan=3)

    def create_button(self, row, col, command):
        button = tk.Button(
            self.root,
            text='',
            font=('normal', 40),
            width=5,
            height=2,
            command=command
        )
        button.grid(row=row, column=col)
        return button

    def player_move(self, index):
        if self.board[index] == '-' and self.current_player == 'X':
            self.make_move(index, 'X')
            if self.check_win('X'):
                self.show_winner("Gracz X wygrywa!")
            else:
                self.current_player = 'O'
                self.root.after(500, self.computer_move)

    def computer_move(self):
        # Wybór strategii w zależności od poziomu trudności
        if self.difficulty.get() == "Łatwy":
            move = self.random_move()
        elif self.difficulty.get() == "Średni":
            move = self.block_player() or self.random_move()
        else:  # Trudny
            strategies = [
                self.find_winning_move,
                self.block_player,
                self.take_center,
                self.take_corner,
                self.random_move
            ]
            move = None
            for strategy in strategies:
                move = strategy()
                if move is not None:
                    break

        if move is not None:
            self.make_move(move, 'O')
            if self.check_win('O'):
                self.show_winner("Komputer wygrywa!")
            else:
                self.current_player = 'X'

    def make_move(self, index, player):
        self.board[index] = player
        self.buttons[index].config(text=player)

    def find_winning_move(self):
        for i in range(9):
            if self.board[i] == '-':
                self.board[i] = 'O'
                if self.check_win('O'):
                    self.board[i] = '-'
                    return i
                self.board[i] = '-'
        return None

    def block_player(self):
        for i in range(9):
            if self.board[i] == '-':
                self.board[i] = 'X'
                if self.check_win('X'):
                    self.board[i] = '-'
                    return i
                self.board[i] = '-'
        return None

    def take_center(self):
        return 4 if self.board[4] == '-' else None

    def take_corner(self):
        for i in [0, 2, 6, 8]:
            if self.board[i] == '-':
                return i
        return None

    def random_move(self):
        available_moves = [i for i, x in enumerate(self.board) if x == '-']
        return random.choice(available_moves) if available_moves else None

    def check_win(self, player):
        return any(
            self.board[a] == self.board[b] == self.board[c] == player
            for a, b, c in WINNING_COMBINATIONS
        )

    def show_winner(self, winner_text):
        winner_label = tk.Label(
            self.root, text=winner_text, font=('normal', 20)
        )
        winner_label.grid(row=5, column=0, columnspan=3)
        self.disable_buttons()

    def disable_buttons(self):
        for button in self.buttons:
            button.config(state="disabled")

    def reset_game(self):
        self.board = ['-' for _ in range(9)]
        self.current_player = 'X'
        for button in self.buttons:
            button.config(text='', state="normal")


root = tk.Tk()
game = TicTacToe(root)
root.mainloop()
